// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: webpush.sql

package repo

import (
	"context"
)

const createWebPushSubscriptionForUser = `-- name: CreateWebPushSubscriptionForUser :exec
INSERT
	OR REPLACE INTO webpush_subscriptions (
		id,
		user_id,
		user_agent,
		endpoint,
		auth,
		key,
		token_id
	)
VALUES
	(?, ?, ?, ?, ?, ?, ?)
`

type CreateWebPushSubscriptionForUserParams struct {
	ID        string
	UserID    string
	UserAgent string
	Endpoint  string
	Auth      string
	Key       string
	TokenID   string
}

func (q *Queries) CreateWebPushSubscriptionForUser(ctx context.Context, arg CreateWebPushSubscriptionForUserParams) error {
	_, err := q.db.ExecContext(ctx, createWebPushSubscriptionForUser,
		arg.ID,
		arg.UserID,
		arg.UserAgent,
		arg.Endpoint,
		arg.Auth,
		arg.Key,
		arg.TokenID,
	)
	return err
}

const deleteWebPushSubscriptionByID = `-- name: DeleteWebPushSubscriptionByID :execrows
DELETE FROM
	webpush_subscriptions
WHERE
	id = ?
`

func (q *Queries) DeleteWebPushSubscriptionByID(ctx context.Context, id string) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteWebPushSubscriptionByID, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deleteWebPushSubscriptionForToken = `-- name: DeleteWebPushSubscriptionForToken :execrows
DELETE FROM
	webpush_subscriptions
WHERE
	token_id = ?
`

func (q *Queries) DeleteWebPushSubscriptionForToken(ctx context.Context, tokenID string) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteWebPushSubscriptionForToken, tokenID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getWebPushSubscriptionsForUser = `-- name: GetWebPushSubscriptionsForUser :many
SELECT
	id, user_id, user_agent, endpoint, auth, "key", token_id
FROM
	webpush_subscriptions
WHERE
	user_id = ?
`

func (q *Queries) GetWebPushSubscriptionsForUser(ctx context.Context, userID string) ([]WebpushSubscription, error) {
	rows, err := q.db.QueryContext(ctx, getWebPushSubscriptionsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WebpushSubscription
	for rows.Next() {
		var i WebpushSubscription
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.UserAgent,
			&i.Endpoint,
			&i.Auth,
			&i.Key,
			&i.TokenID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
