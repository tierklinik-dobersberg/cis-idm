// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: phone.sql

package repo

import (
	"context"
)

const createUserPhoneNumber = `-- name: CreateUserPhoneNumber :one
INSERT INTO
	user_phone_numbers (id, user_id, phone_number, is_primary, verified)
VALUES
	(?, ?, ?, ?, ?)
RETURNING id, user_id, phone_number, is_primary, verified
`

type CreateUserPhoneNumberParams struct {
	ID          string
	UserID      string
	PhoneNumber string
	IsPrimary   bool
	Verified    bool
}

func (q *Queries) CreateUserPhoneNumber(ctx context.Context, arg CreateUserPhoneNumberParams) (UserPhoneNumber, error) {
	row := q.db.QueryRowContext(ctx, createUserPhoneNumber,
		arg.ID,
		arg.UserID,
		arg.PhoneNumber,
		arg.IsPrimary,
		arg.Verified,
	)
	var i UserPhoneNumber
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PhoneNumber,
		&i.IsPrimary,
		&i.Verified,
	)
	return i, err
}

const deleteUserPhoneNumber = `-- name: DeleteUserPhoneNumber :execrows
DELETE FROM
	user_phone_numbers
WHERE
	user_id = ?
	AND id = ?
`

type DeleteUserPhoneNumberParams struct {
	UserID string
	ID     string
}

func (q *Queries) DeleteUserPhoneNumber(ctx context.Context, arg DeleteUserPhoneNumberParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteUserPhoneNumber, arg.UserID, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getPhoneNumberByID = `-- name: GetPhoneNumberByID :one
SELECT
	id, user_id, phone_number, is_primary, verified
FROM
	user_phone_numbers
WHERE
	user_id = ?
	AND id = ?
`

type GetPhoneNumberByIDParams struct {
	UserID string
	ID     string
}

func (q *Queries) GetPhoneNumberByID(ctx context.Context, arg GetPhoneNumberByIDParams) (UserPhoneNumber, error) {
	row := q.db.QueryRowContext(ctx, getPhoneNumberByID, arg.UserID, arg.ID)
	var i UserPhoneNumber
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PhoneNumber,
		&i.IsPrimary,
		&i.Verified,
	)
	return i, err
}

const getPhoneNumbersByUserID = `-- name: GetPhoneNumbersByUserID :many
SELECT
	id, user_id, phone_number, is_primary, verified
FROM
	user_phone_numbers
WHERE
	user_id = ?
`

func (q *Queries) GetPhoneNumbersByUserID(ctx context.Context, userID string) ([]UserPhoneNumber, error) {
	rows, err := q.db.QueryContext(ctx, getPhoneNumbersByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserPhoneNumber
	for rows.Next() {
		var i UserPhoneNumber
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PhoneNumber,
			&i.IsPrimary,
			&i.Verified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserPrimaryPhoneNumber = `-- name: GetUserPrimaryPhoneNumber :one
SELECT
	id, user_id, phone_number, is_primary, verified
FROM
	user_phone_numbers
WHERE
	user_id = ?
	AND is_primary = TRUE
`

func (q *Queries) GetUserPrimaryPhoneNumber(ctx context.Context, userID string) (UserPhoneNumber, error) {
	row := q.db.QueryRowContext(ctx, getUserPrimaryPhoneNumber, userID)
	var i UserPhoneNumber
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PhoneNumber,
		&i.IsPrimary,
		&i.Verified,
	)
	return i, err
}

const markPhoneNumberAsPrimary = `-- name: MarkPhoneNumberAsPrimary :execrows
UPDATE
	user_phone_numbers
SET
	is_primary = (id == ?)
WHERE
	user_id = ?
`

type MarkPhoneNumberAsPrimaryParams struct {
	ID     string
	UserID string
}

func (q *Queries) MarkPhoneNumberAsPrimary(ctx context.Context, arg MarkPhoneNumberAsPrimaryParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, markPhoneNumberAsPrimary, arg.ID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const markPhoneNumberAsVerified = `-- name: MarkPhoneNumberAsVerified :execrows
UPDATE
	user_phone_numbers
SET
	verified = TRUE
WHERE
	user_id = ?
	AND id = ?
`

type MarkPhoneNumberAsVerifiedParams struct {
	UserID string
	ID     string
}

func (q *Queries) MarkPhoneNumberAsVerified(ctx context.Context, arg MarkPhoneNumberAsVerifiedParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, markPhoneNumberAsVerified, arg.UserID, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const markPhoneNumberVerified = `-- name: MarkPhoneNumberVerified :execrows
UPDATE
	user_phone_numbers
SET
	verified = ?
WHERE
	id = ?
	AND user_id = ?
`

type MarkPhoneNumberVerifiedParams struct {
	Verified bool
	ID       string
	UserID   string
}

func (q *Queries) MarkPhoneNumberVerified(ctx context.Context, arg MarkPhoneNumberVerifiedParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, markPhoneNumberVerified, arg.Verified, arg.ID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
