// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: address.sql

package repo

import (
	"context"
)

const createUserAddress = `-- name: CreateUserAddress :one
INSERT INTO
    user_addresses (
        id,
        user_id,
        city_code,
        city_name,
        street,
        extra
    )
VALUES
    (?, ?, ?, ?, ?, ?)
RETURNING id, user_id, city_code, city_name, street, extra
`

type CreateUserAddressParams struct {
	ID       string
	UserID   string
	CityCode string
	CityName string
	Street   string
	Extra    string
}

func (q *Queries) CreateUserAddress(ctx context.Context, arg CreateUserAddressParams) (UserAddress, error) {
	row := q.db.QueryRowContext(ctx, createUserAddress,
		arg.ID,
		arg.UserID,
		arg.CityCode,
		arg.CityName,
		arg.Street,
		arg.Extra,
	)
	var i UserAddress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CityCode,
		&i.CityName,
		&i.Street,
		&i.Extra,
	)
	return i, err
}

const deleteUserAddress = `-- name: DeleteUserAddress :execrows
DELETE FROM
    user_addresses
WHERE
    id = ?
    AND user_id = ?
`

type DeleteUserAddressParams struct {
	ID     string
	UserID string
}

func (q *Queries) DeleteUserAddress(ctx context.Context, arg DeleteUserAddressParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteUserAddress, arg.ID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getUserAddress = `-- name: GetUserAddress :one
SELECT
    id, user_id, city_code, city_name, street, extra
FROM
    user_addresses
WHERE
    user_id = ?
    AND id = ?
`

type GetUserAddressParams struct {
	UserID string
	ID     string
}

func (q *Queries) GetUserAddress(ctx context.Context, arg GetUserAddressParams) (UserAddress, error) {
	row := q.db.QueryRowContext(ctx, getUserAddress, arg.UserID, arg.ID)
	var i UserAddress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CityCode,
		&i.CityName,
		&i.Street,
		&i.Extra,
	)
	return i, err
}

const getUserAddresses = `-- name: GetUserAddresses :many
SELECT
    id, user_id, city_code, city_name, street, extra
FROM
    user_addresses
WHERE
    user_id = ?
`

func (q *Queries) GetUserAddresses(ctx context.Context, userID string) ([]UserAddress, error) {
	rows, err := q.db.QueryContext(ctx, getUserAddresses, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserAddress
	for rows.Next() {
		var i UserAddress
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CityCode,
			&i.CityName,
			&i.Street,
			&i.Extra,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserAddress = `-- name: UpdateUserAddress :one
UPDATE
    user_addresses
SET
    city_code = ?,
    city_name = ?,
    street = ?,
    extra = ?
WHERE
    id = ?
    AND user_id = ?
RETURNING id, user_id, city_code, city_name, street, extra
`

type UpdateUserAddressParams struct {
	CityCode string
	CityName string
	Street   string
	Extra    string
	ID       string
	UserID   string
}

func (q *Queries) UpdateUserAddress(ctx context.Context, arg UpdateUserAddressParams) (UserAddress, error) {
	row := q.db.QueryRowContext(ctx, updateUserAddress,
		arg.CityCode,
		arg.CityName,
		arg.Street,
		arg.Extra,
		arg.ID,
		arg.UserID,
	)
	var i UserAddress
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CityCode,
		&i.CityName,
		&i.Street,
		&i.Extra,
	)
	return i, err
}
