// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: roles.sql

package repo

import (
	"context"
	"database/sql"
)

const assignRoleToUser = `-- name: AssignRoleToUser :exec
INSERT INTO
	role_assignments (user_id, role_id)
VALUES
	(?, ?)
`

type AssignRoleToUserParams struct {
	UserID string
	RoleID string
}

func (q *Queries) AssignRoleToUser(ctx context.Context, arg AssignRoleToUserParams) error {
	_, err := q.db.ExecContext(ctx, assignRoleToUser, arg.UserID, arg.RoleID)
	return err
}

const createRole = `-- name: CreateRole :one
INSERT INTO
	roles (id, name, description, delete_protected)
VALUES
	(?, ?, ?, ?)
RETURNING id, name, description, delete_protected
`

type CreateRoleParams struct {
	ID              string
	Name            string
	Description     string
	DeleteProtected bool
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, createRole,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.DeleteProtected,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DeleteProtected,
	)
	return i, err
}

const deleteRole = `-- name: DeleteRole :execrows
DELETE FROM
	roles
WHERE
	id = ?
`

func (q *Queries) DeleteRole(ctx context.Context, id string) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteRole, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getRoleByID = `-- name: GetRoleByID :one
SELECT
	id, name, description, delete_protected
FROM
	roles
WHERE
	id = ?
`

func (q *Queries) GetRoleByID(ctx context.Context, id string) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleByID, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DeleteProtected,
	)
	return i, err
}

const getRoleByName = `-- name: GetRoleByName :one
SELECT
	id, name, description, delete_protected
FROM
	roles
WHERE
	name = ?
`

func (q *Queries) GetRoleByName(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleByName, name)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DeleteProtected,
	)
	return i, err
}

const getRoles = `-- name: GetRoles :many
SELECT
	id, name, description, delete_protected
FROM
	roles
`

func (q *Queries) GetRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.DeleteProtected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRolesForUser = `-- name: GetRolesForUser :many
SELECT
	roles.id, roles.name, roles.description, roles.delete_protected
FROM
	role_assignments
	JOIN roles ON roles.id = role_id
WHERE
	user_id = ?
`

func (q *Queries) GetRolesForUser(ctx context.Context, userID string) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getRolesForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.DeleteProtected,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByRole = `-- name: GetUsersByRole :many
SELECT
	user_id, role_id, id, username, display_name, first_name, last_name, extra, avatar, birthday, password, totp_secret
FROM
	role_assignments
	JOIN users ON users.id = user_id
WHERE
	role_id = ?
`

type GetUsersByRoleRow struct {
	UserID      string
	RoleID      string
	ID          string
	Username    string
	DisplayName string
	FirstName   string
	LastName    string
	Extra       string
	Avatar      string
	Birthday    string
	Password    string
	TotpSecret  sql.NullString
}

func (q *Queries) GetUsersByRole(ctx context.Context, roleID string) ([]GetUsersByRoleRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByRole, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersByRoleRow
	for rows.Next() {
		var i GetUsersByRoleRow
		if err := rows.Scan(
			&i.UserID,
			&i.RoleID,
			&i.ID,
			&i.Username,
			&i.DisplayName,
			&i.FirstName,
			&i.LastName,
			&i.Extra,
			&i.Avatar,
			&i.Birthday,
			&i.Password,
			&i.TotpSecret,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unassignRoleFromUser = `-- name: UnassignRoleFromUser :execrows
DELETE FROM
	role_assignments
WHERE
	user_id = ?
	AND role_id = ?
`

type UnassignRoleFromUserParams struct {
	UserID string
	RoleID string
}

func (q *Queries) UnassignRoleFromUser(ctx context.Context, arg UnassignRoleFromUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, unassignRoleFromUser, arg.UserID, arg.RoleID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const updateRole = `-- name: UpdateRole :one
UPDATE
	roles
SET
	name = ?,
	description = ?,
	delete_protected = ?
WHERE
	id = ?
RETURNING id, name, description, delete_protected
`

type UpdateRoleParams struct {
	Name            string
	Description     string
	DeleteProtected bool
	ID              string
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, updateRole,
		arg.Name,
		arg.Description,
		arg.DeleteProtected,
		arg.ID,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.DeleteProtected,
	)
	return i, err
}
