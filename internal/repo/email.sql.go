// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: email.sql

package repo

import (
	"context"
)

const createEMail = `-- name: CreateEMail :one
INSERT INTO
	user_emails (id, user_id, address, verified, is_primary)
VALUES
	(?, ?, ?, ?, ?) RETURNING id, user_id, address, verified, is_primary
`

type CreateEMailParams struct {
	ID        string
	UserID    string
	Address   string
	Verified  bool
	IsPrimary bool
}

func (q *Queries) CreateEMail(ctx context.Context, arg CreateEMailParams) (UserEmail, error) {
	row := q.db.QueryRowContext(ctx, createEMail,
		arg.ID,
		arg.UserID,
		arg.Address,
		arg.Verified,
		arg.IsPrimary,
	)
	var i UserEmail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Address,
		&i.Verified,
		&i.IsPrimary,
	)
	return i, err
}

const deleteEMailFromUser = `-- name: DeleteEMailFromUser :execrows
DELETE FROM
	user_emails
WHERE
	id = ?
	AND user_id = ?
`

type DeleteEMailFromUserParams struct {
	ID     string
	UserID string
}

func (q *Queries) DeleteEMailFromUser(ctx context.Context, arg DeleteEMailFromUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteEMailFromUser, arg.ID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getEmailByID = `-- name: GetEmailByID :one
SELECT
	id, user_id, address, verified, is_primary
FROM
	user_emails
WHERE
	user_id = ?
	AND id = ?
`

type GetEmailByIDParams struct {
	UserID string
	ID     string
}

func (q *Queries) GetEmailByID(ctx context.Context, arg GetEmailByIDParams) (UserEmail, error) {
	row := q.db.QueryRowContext(ctx, getEmailByID, arg.UserID, arg.ID)
	var i UserEmail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Address,
		&i.Verified,
		&i.IsPrimary,
	)
	return i, err
}

const getEmailsForUserByID = `-- name: GetEmailsForUserByID :many
SELECT
	id, user_id, address, verified, is_primary
FROM
	user_emails
WHERE
	user_id = ?
`

func (q *Queries) GetEmailsForUserByID(ctx context.Context, userID string) ([]UserEmail, error) {
	rows, err := q.db.QueryContext(ctx, getEmailsForUserByID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserEmail
	for rows.Next() {
		var i UserEmail
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Address,
			&i.Verified,
			&i.IsPrimary,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPrimaryEmailForUserByID = `-- name: GetPrimaryEmailForUserByID :one
SELECT
	id, user_id, address, verified, is_primary
FROM
	user_emails
WHERE
	user_id = ?
	and is_primary = true
LIMIT
	1
`

func (q *Queries) GetPrimaryEmailForUserByID(ctx context.Context, userID string) (UserEmail, error) {
	row := q.db.QueryRowContext(ctx, getPrimaryEmailForUserByID, userID)
	var i UserEmail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Address,
		&i.Verified,
		&i.IsPrimary,
	)
	return i, err
}

const markEmailAsPrimary = `-- name: MarkEmailAsPrimary :execrows
UPDATE
	user_emails
SET
	is_primary = (id == ?)
WHERE
	user_id = ?
`

type MarkEmailAsPrimaryParams struct {
	ID     string
	UserID string
}

func (q *Queries) MarkEmailAsPrimary(ctx context.Context, arg MarkEmailAsPrimaryParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, markEmailAsPrimary, arg.ID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const markEmailAsVerified = `-- name: MarkEmailAsVerified :execrows
UPDATE
	user_emails
SET
	verified = true
WHERE
	user_id = ?
	AND id = ?
`

type MarkEmailAsVerifiedParams struct {
	UserID string
	ID     string
}

func (q *Queries) MarkEmailAsVerified(ctx context.Context, arg MarkEmailAsVerifiedParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, markEmailAsVerified, arg.UserID, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const markEmailVerified = `-- name: MarkEmailVerified :execrows
UPDATE
	user_emails
SET
	verified = ?
WHERE
	id = ?
	AND user_id = ?
`

type MarkEmailVerifiedParams struct {
	Verified bool
	ID       string
	UserID   string
}

func (q *Queries) MarkEmailVerified(ctx context.Context, arg MarkEmailVerifiedParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, markEmailVerified, arg.Verified, arg.ID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
